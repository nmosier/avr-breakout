TODO

*** fix reflection ***
- advance bounds
- check if they overlap
- if so, reflect velocity
And that's all there is to it! If it's done with a step of 1 pixel, then this will work UNLESS
an object is 1 pixel in size. But who the fuck cares about 1-pixel objects?!


0. (TODO) Factor out commonalities for project_round and project_down.
1. (TODO) Create global cleanup update queue for objpool.
2. (TODO) redefine object definitions as macros.

Object Collision
- passive: function pointer -- handle collisions of other objects into this object.
           - e.g. GRID will have different collision function from generic object.
- active: function pointer -- collide into other objects. Probably can be standard function.

``Object'' struct:
 - collide_passive
 - collide_active
 - bounds
 - velocity

Object pool: contains array of all objects. At each tick, each object is collided with all other
             objects and then its velocity is updated.


#### FRACS ####
- Don't need to reduce.
- Do need to compare fractions (for velocity-ticking).

